#include <icebird/Graphics/Shaders.hpp>


#define LOAD_SHADER_SOURCE(source) ([]() {                                  \
    extern const char _binary_##source##_start, _binary_##source##_end;     \
    const char* start = &_binary_##source##_start;                          \
    return start;                                                           \
});

//#define LOAD_SHADER_SOURCE(handle, x) do {                          \
//        extern const char _binary_##x##_start, _binary_##x##_end;   \
//        const char *start = &_binary_##x##_start;                   \
//        size_t size = &_binary_##x##_end - start;                   \
//        glShaderSource(handle, 1, &start, &size);                   \
//    } while (0)

#define STRINGIFY(A) #A


extern const char _binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_frag_start, _binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_frag_end;
const char* positionColor_frag = &_binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_frag_start;
unsigned int positionColor_frag_len = &_binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_frag_end - positionColor_frag;

extern const char _binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_vert_start, _binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_vert_end;
const char* positionColor_vert = &_binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_vert_start;
unsigned int positionColor_vert_len = &_binary_icebird_src_icebird_Graphics_shaders_v330_positionColor_vert_end - positionColor_vert;

//STRINGIFY(icebird_src_icebird_Graphics_shaders_v330_positionColor_frag)

//void* icebird_src_icebird_Graphics_shaders_v330_positionColor_frag = NULL;
//LOAD_SHADER_SOURCE(icebird_src_icebird_Graphics_shaders_v330_positionColor_frag);
//const char* positionColor_frag = LOAD_SHADER_SOURCE(icebird_src_icebird_Graphics_shaders_v330_positionColor_frag);

//unsigned char positionColor_frag[] = {
//  0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30,
//  0x20, 0x63, 0x6f, 0x72, 0x65, 0x0a, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68,
//  0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x5f, 0x73,
//  0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a,
//  0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74,
//  0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74,
//  0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x5f, 0x66, 0x72, 0x61, 0x67,
//  0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64,
//  0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x76, 0x6f, 0x69, 0x64, 0x29, 0x20,
//  0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x5f, 0x66, 0x72, 0x61, 0x67,
//  0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x73, 0x6d,
//  0x6f, 0x6f, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d,
//  0x0a, 0x0a
//};
//unsigned int positionColor_frag_len = 146;

//unsigned char positionColor_vert[] = {
//  0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30,
//  0x20, 0x63, 0x6f, 0x72, 0x65, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
//  0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20,
//  0x30, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61,
//  0x5f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x3b, 0x0a, 0x6c, 0x61, 0x79,
//  0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
//  0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63,
//  0x33, 0x20, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x73,
//  0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65,
//  0x63, 0x34, 0x20, 0x76, 0x5f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x43,
//  0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,
//  0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x4d, 0x56, 0x50, 0x3b, 0x0a,
//  0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x76,
//  0x6f, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
//  0x5f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
//  0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x63, 0x6f,
//  0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
//  0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
//  0x20, 0x3d, 0x20, 0x4d, 0x56, 0x50, 0x20, 0x2a, 0x20, 0x76, 0x65, 0x63,
//  0x34, 0x28, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x2c, 0x20,
//  0x31, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a
//};
//unsigned int positionColor_vert_len = 247;
